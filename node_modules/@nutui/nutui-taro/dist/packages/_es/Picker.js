var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
/*!
* @nutui/nutui-taro v3.1.15 Fri Jan 21 2022 15:42:05 GMT+0800 (GMT+08:00)
* (c) 2021 @jdf2e.
* Released under the MIT License.
*/
import { ref, onUpdated, watch, resolveComponent, openBlock, createBlock, withCtx, renderSlot } from "vue";
import { c as createComponent } from "./component.js";
import { c as commonProps } from "./commonProps.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper.js";
const { create } = createComponent("picker");
const _sfc_main = create({
  props: __spreadValues({
    mode: {
      type: String,
      default: "selector"
    }
  }, commonProps),
  emits: ["confirm"],
  setup(props, { emit }) {
    let value = ref([]);
    let range = ref([]);
    onUpdated(() => {
      console.log("updated", props.listData);
    });
    const onChange = (e) => {
      var _a;
      let ret;
      if (props.mode === "selector") {
        ret = props.listData[e.detail.value];
      } else if (props.mode === "multiSelector") {
        ret = (_a = range.value) == null ? void 0 : _a.map((item, idx) => item[e.detail.value[idx]]).filter((res) => res);
      }
      emit("confirm", e.detail.value, ret);
    };
    watch(props.listData, (val) => {
      try {
        if (val.length) {
          value.value = [];
          range.value = [];
          if (props.mode === "selector") {
            range.value = props.listData;
          } else if (props.mode === "multiSelector") {
            val.forEach((item) => {
              value.value.push(item.defaultIndex);
              range.value.push(item.values);
            });
          }
        }
      } catch (error) {
        console.log("listData\u53C2\u6570\u683C\u5F0F\u9519\u8BEF", error);
      }
    }, { immediate: true, deep: true });
    const onColumnChange = (e) => {
      console.log("\u4FEE\u6539\u7684\u5217\u4E3A", e.detail.column, "\uFF0C\u503C\u4E3A", e.detail.value);
    };
    return {
      confirm,
      onChange,
      value,
      range,
      onColumnChange
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_picker = resolveComponent("picker");
  return openBlock(), createBlock(_component_picker, {
    mode: _ctx.mode,
    range: _ctx.range,
    onChange: _ctx.onChange,
    onColumnchange: _ctx.onColumnChange,
    value: _ctx.value
  }, {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default")
    ]),
    _: 3
  }, 8, ["mode", "range", "onChange", "onColumnchange", "value"]);
}
var index_taro = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { index_taro as default };
