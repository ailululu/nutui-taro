/*!
* @nutui/nutui-taro v3.1.15 Fri Jan 21 2022 15:42:05 GMT+0800 (GMT+08:00)
* (c) 2021 @jdf2e.
* Released under the MIT License.
*/
import Taro from "@tarojs/taro";
import { computed, reactive, onMounted, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, createVNode, withCtx, createTextVNode } from "vue";
import { c as createComponent } from "./component.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper.js";
const { componentName, create } = createComponent("signature");
const _sfc_main = create({
  props: {
    customClass: {
      type: String,
      default: ""
    },
    lineWidth: {
      type: Number,
      default: 2
    },
    strokeStyle: {
      type: String,
      default: "#000"
    },
    type: {
      type: String,
      default: "png"
    },
    unSupportTpl: {
      type: String,
      default: "\u5BF9\u4E0D\u8D77\uFF0C\u5F53\u524D\u6D4F\u89C8\u5668\u4E0D\u652F\u6301Canvas\uFF0C\u65E0\u6CD5\u4F7F\u7528\u672C\u63A7\u4EF6\uFF01"
    }
  },
  components: {},
  emits: ["confirm", "clear"],
  setup(props, { emit }) {
    const classes = computed(() => {
      const prefixCls = componentName;
      return {
        [prefixCls]: true,
        [`${props.customClass}`]: props.customClass
      };
    });
    const state = reactive({
      canvas: null,
      canvasHeight: 0,
      canvasWidth: 0,
      ctx: null
    });
    const startEventHandler = (event) => {
      event.preventDefault();
      state.ctx.beginPath();
      state.ctx.lineWidth = props.lineWidth;
      state.ctx.strokeStyle = props.strokeStyle;
    };
    const moveEventHandler = (event) => {
      event.preventDefault();
      let evt = event.changedTouches[0];
      let mouseX = evt.x;
      let mouseY = evt.y;
      state.ctx.lineTo(mouseX, mouseY);
      state.ctx.stroke();
    };
    const endEventHandler = (event) => {
      event.preventDefault();
    };
    const leaveEventHandler = (event) => {
      event.preventDefault();
    };
    const clear = () => {
      state.ctx.clearRect(0, 0, state.canvasWidth, state.canvasHeight);
      state.ctx.closePath();
      emit("clear");
    };
    const confirm = () => {
      onSave();
    };
    const onSave = () => {
      if (!state.canvas) {
        return;
      }
      Taro.createSelectorQuery().select("#spcanvas").fields({
        node: true,
        size: true
      }).exec(async (res) => {
        Taro.canvasToTempFilePath({
          canvas: res[0].node,
          fileType: props.type
        }).then((res2) => {
          emit("confirm", res2.tempFilePath);
        }).catch((e) => {
          emit("confirm", e);
        });
      });
    };
    onMounted(() => {
      setTimeout(() => {
        Taro.createSelectorQuery().select("#spcanvas").fields({
          node: true,
          size: true
        }, function(res) {
          const canvas = res.node;
          const ctx = canvas.getContext("2d");
          state.canvas = canvas;
          state.ctx = ctx;
          state.canvasWidth = res.width;
          state.canvasHeight = res.height;
        }).exec();
      }, 500);
    });
    return {
      confirm,
      clear,
      classes,
      startEventHandler,
      moveEventHandler,
      endEventHandler,
      leaveEventHandler
    };
  }
});
const _hoisted_1 = { class: "nut-signature-inner" };
const _hoisted_2 = /* @__PURE__ */ createTextVNode("\u91CD\u7B7E");
const _hoisted_3 = /* @__PURE__ */ createTextVNode("\u786E\u8BA4");
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_nut_button = resolveComponent("nut-button");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.classes)
  }, [
    createElementVNode("div", _hoisted_1, [
      createElementVNode("canvas", {
        class: "spcanvas",
        id: "spcanvas",
        canvasId: "spcanvas",
        "canvas-id": "spcanvas",
        type: "2d",
        "disable-scroll": "true",
        onTouchstart: _cache[0] || (_cache[0] = (...args) => _ctx.startEventHandler && _ctx.startEventHandler(...args)),
        onTouchmove: _cache[1] || (_cache[1] = (...args) => _ctx.moveEventHandler && _ctx.moveEventHandler(...args)),
        onTouchend: _cache[2] || (_cache[2] = (...args) => _ctx.endEventHandler && _ctx.endEventHandler(...args)),
        onTouchleave: _cache[3] || (_cache[3] = (...args) => _ctx.leaveEventHandler && _ctx.leaveEventHandler(...args))
      }, null, 32)
    ]),
    createVNode(_component_nut_button, {
      class: "nut-signature-btn",
      type: "default",
      onClick: _cache[4] || (_cache[4] = ($event) => _ctx.clear())
    }, {
      default: withCtx(() => [
        _hoisted_2
      ]),
      _: 1
    }),
    createVNode(_component_nut_button, {
      class: "nut-signature-btn",
      type: "primary",
      onClick: _cache[5] || (_cache[5] = ($event) => _ctx.confirm())
    }, {
      default: withCtx(() => [
        _hoisted_3
      ]),
      _: 1
    })
  ], 2);
}
var index_taro = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { index_taro as default };
