/*!
* @nutui/nutui-taro v3.1.15 Fri Jan 21 2022 15:42:05 GMT+0800 (GMT+08:00)
* (c) 2021 @jdf2e.
* Released under the MIT License.
*/
import { provide, openBlock, createElementBlock, renderSlot } from "vue";
import { c as createComponent } from "./component.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper.js";
const { create } = createComponent("collapse");
const _sfc_main = create({
  props: {
    active: {
      type: [String, Number, Array]
    },
    accordion: {
      type: Boolean
    },
    titleIcon: {
      type: String,
      default: ""
    },
    titleIconSize: {
      type: String,
      default: "16px"
    },
    titleIconColor: {
      type: String,
      default: ""
    },
    titleIconPosition: {
      type: String,
      default: "left"
    },
    icon: {
      type: String,
      default: ""
    },
    iconSize: {
      type: String,
      default: "16px"
    },
    iconColor: {
      type: String,
      default: ""
    },
    rotate: {
      type: [String, Number],
      default: 180
    }
  },
  emits: ["update:active", "change"],
  setup(props, { emit, slots }) {
    const changeVal = (val) => {
      emit("update:active", val);
      emit("change", val);
    };
    const changeValAry = (name) => {
      const activeItem = props.active instanceof Object ? Object.values(props.active) : props.active;
      let index = -1;
      activeItem.forEach((item, idx) => {
        if (String(item) == String(name)) {
          index = idx;
        }
      });
      index > -1 ? activeItem.splice(index, 1) : activeItem.push(name);
      changeVal(activeItem);
    };
    const isExpanded = (name) => {
      const { accordion, active } = props;
      if (accordion) {
        return typeof active === "number" || typeof active === "string" ? active == name : false;
      }
    };
    const activeIndex = () => {
      var _a;
      const activeCollapse = props.active;
      const childrenList = (_a = slots.default) == null ? void 0 : _a.call(slots);
      let act = [];
      childrenList.forEach((item, index) => {
        if (typeof activeCollapse == "number" || typeof activeCollapse == "string") {
          if (item.props.name == activeCollapse) {
            act.push(item.flag);
            return act;
          }
        } else {
          let ary = Array.from(activeCollapse);
          if (ary.includes(String(item.props.name)) || ary.includes(Number(item.props.name))) {
            act.push(item.flag);
          }
        }
      });
      return act;
    };
    const getParentChildren = () => {
      var _a;
      return (_a = slots.default) == null ? void 0 : _a.call(slots);
    };
    provide("collapseParent", {
      children: [],
      props,
      changeValAry,
      changeVal,
      isExpanded,
      activeIndex,
      getParentChildren
    });
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("view", null, [
    renderSlot(_ctx.$slots, "default")
  ]);
}
var index_taro = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { index_taro as default };
