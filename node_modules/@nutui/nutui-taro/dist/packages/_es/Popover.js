var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
/*!
* @nutui/nutui-taro v3.1.15 Fri Jan 21 2022 15:42:05 GMT+0800 (GMT+08:00)
* (c) 2021 @jdf2e.
* Released under the MIT License.
*/
import { toRefs, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createElementVNode, createBlock, createCommentVNode, renderSlot, ref, reactive, onMounted, watch, withModifiers, Fragment, renderList, createVNode, toDisplayString } from "vue";
import { c as createComponent } from "./component.js";
import { _ as _sfc_main$2, P as Popup, p as popupProps } from "./index3.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper.js";
import { u as useTaroRect } from "./index2.js";
import Taro from "@tarojs/taro";
import "./use-lock-scroll.js";
import "./pxCheck.js";
const { componentName: componentName$1, create: create$1 } = createComponent("button");
const _sfc_main$1 = create$1({
  components: {
    [_sfc_main$2.name]: _sfc_main$2
  },
  props: {
    color: String,
    shape: {
      type: String,
      default: "round"
    },
    plain: {
      type: Boolean,
      default: false
    },
    loading: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    type: {
      type: String,
      default: "default"
    },
    size: {
      type: String,
      default: "normal"
    },
    block: {
      type: Boolean,
      default: false
    },
    icon: {
      type: String,
      default: ""
    }
  },
  emits: ["click"],
  setup(props, { emit, slots }) {
    const { type, size, shape, disabled, loading, color, plain, block } = toRefs(props);
    const handleClick = (event) => {
      if (!loading.value && !disabled.value) {
        emit("click", event);
      }
    };
    const classes = computed(() => {
      const prefixCls = componentName$1;
      return {
        [prefixCls]: true,
        [`${prefixCls}--${type.value}`]: type.value,
        [`${prefixCls}--${size.value}`]: size.value,
        [`${prefixCls}--${shape.value}`]: shape.value,
        [`${prefixCls}--plain`]: plain.value,
        [`${prefixCls}--block`]: block.value,
        [`${prefixCls}--disabled`]: disabled.value,
        [`${prefixCls}--loading`]: loading.value
      };
    });
    const getStyle = computed(() => {
      var _a;
      const style = {};
      if (color == null ? void 0 : color.value) {
        if (plain.value) {
          style.color = color.value;
          style.background = "#fff";
          if (!((_a = color.value) == null ? void 0 : _a.includes("gradient"))) {
            style.borderColor = color.value;
          }
        } else {
          style.color = "#fff";
          style.background = color.value;
        }
      }
      return style;
    });
    return {
      handleClick,
      classes,
      getStyle
    };
  }
});
const _hoisted_1$1 = { class: "nut-button__warp" };
function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_nut_icon = resolveComponent("nut-icon");
  return openBlock(), createElementBlock("view", {
    class: normalizeClass(_ctx.classes),
    style: normalizeStyle(_ctx.getStyle),
    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))
  }, [
    createElementVNode("view", _hoisted_1$1, [
      _ctx.loading ? (openBlock(), createBlock(_component_nut_icon, {
        key: 0,
        class: "nut-icon-loading"
      })) : createCommentVNode("", true),
      _ctx.icon && !_ctx.loading ? (openBlock(), createBlock(_component_nut_icon, {
        key: 1,
        class: normalizeClass(_ctx.icon),
        name: _ctx.icon
      }, null, 8, ["class", "name"])) : createCommentVNode("", true),
      _ctx.$slots.default ? (openBlock(), createElementBlock("view", {
        key: 2,
        class: normalizeClass({ text: _ctx.icon || _ctx.loading })
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2)) : createCommentVNode("", true)
    ])
  ], 6);
}
var Button = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["render", _sfc_render$1]]);
const { componentName, create } = createComponent("popover");
const _sfc_main = create({
  inheritAttrs: false,
  components: {
    [Popup.name]: Popup,
    [Button.name]: Button
  },
  props: __spreadProps(__spreadValues({}, popupProps), {
    list: {
      type: Array,
      default: []
    },
    theme: {
      type: String,
      default: "light"
    },
    location: {
      type: String,
      default: "bottom"
    }
  }),
  emits: ["update", "update:visible", "close", "choose", "openPopover"],
  setup(props, { emit }) {
    const reference = ref();
    const state = reactive({
      elWidth: 0,
      elHeight: 0
    });
    const showPopup = ref(props.visible);
    const { theme, location } = toRefs(props);
    const classes = computed(() => {
      const prefixCls = componentName;
      return {
        [prefixCls]: true,
        [`${prefixCls}--${theme.value}`]: theme.value
      };
    });
    const popoverContent = computed(() => {
      const prefixCls = "popoverContent";
      return {
        [prefixCls]: true,
        [`${prefixCls}--${location.value}`]: location.value
      };
    });
    const popoverArrow = computed(() => {
      const prefixCls = "popoverArrow";
      return {
        [prefixCls]: true,
        [`${prefixCls}--${location.value}`]: location.value
      };
    });
    const getReference = async () => {
      const refe = await useTaroRect(reference, Taro);
      state.elWidth = refe.width;
      state.elHeight = refe.height;
    };
    const getStyle = computed(() => {
      const style = {};
      if (location.value == "top") {
        style.bottom = state.elHeight + 10 + "px";
      } else if (location.value == "right") {
        style.top = 0 + "px";
        style.right = -state.elWidth + "px";
      } else if (location.value == "left") {
        style.top = 0 + "px";
        style.left = -state.elWidth + "px";
      } else {
        style.top = state.elHeight + 10 + "px";
      }
      return style;
    });
    const getArrowStyle = computed(() => {
      const style = {};
      if (location.value == "top") {
        style.bottom = -20 + "px";
        style.left = state.elWidth / 2 + "px";
      } else if (location.value == "right") {
        style.top = 20 + "px";
        style.left = -20 + "px";
      } else if (location.value == "left") {
        style.top = 20 + "px";
        style.right = -20 + "px";
      } else {
        style.left = state.elWidth / 2 + "px";
        style.top = -20 + "px";
      }
      return style;
    });
    onMounted(() => {
      setTimeout(() => {
        getReference();
      }, 200);
    });
    watch(() => props.visible, (value) => {
      showPopup.value = value;
    });
    const update = (val) => {
      emit("update", val);
      emit("update:visible", val);
    };
    const openPopover = () => {
      update(!props.visible);
      emit("open");
    };
    const closePopover = () => {
      emit("close");
      emit("update:visible", false);
    };
    const chooseItem = (item, index) => {
      emit("choose", item, index);
    };
    const refRandomId = Math.random().toString(36).slice(-8);
    return {
      classes,
      showPopup,
      openPopover,
      popoverContent,
      popoverArrow,
      closePopover,
      chooseItem,
      getReference,
      reference,
      getStyle,
      getArrowStyle,
      refRandomId
    };
  }
});
const _hoisted_1 = ["id"];
const _hoisted_2 = ["onClick"];
const _hoisted_3 = { class: "title-name" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_nut_icon = resolveComponent("nut-icon");
  return openBlock(), createElementBlock("view", {
    onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.openPopover && _ctx.openPopover(...args), ["stop"])),
    class: normalizeClass(_ctx.classes)
  }, [
    createElementVNode("div", {
      ref: "reference",
      id: "reference-" + _ctx.refRandomId
    }, [
      renderSlot(_ctx.$slots, "reference")
    ], 8, _hoisted_1),
    _ctx.showPopup ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
      createElementVNode("view", {
        class: "more-background",
        onClick: _cache[0] || (_cache[0] = withModifiers((...args) => _ctx.closePopover && _ctx.closePopover(...args), ["stop"]))
      }),
      createElementVNode("view", {
        class: normalizeClass(_ctx.popoverContent),
        style: normalizeStyle(_ctx.getStyle)
      }, [
        createElementVNode("view", {
          class: normalizeClass(_ctx.popoverArrow),
          style: normalizeStyle(_ctx.getArrowStyle)
        }, null, 6),
        renderSlot(_ctx.$slots, "content"),
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.list, (item, index) => {
          return openBlock(), createElementBlock("view", {
            key: index,
            class: normalizeClass({ "title-item": true, disabled: item.disabled }),
            onClick: withModifiers(($event) => _ctx.chooseItem(item, index), ["stop"])
          }, [
            item.icon ? renderSlot(_ctx.$slots, "default", { key: 0 }, () => [
              createVNode(_component_nut_icon, {
                class: "item-img",
                name: item.icon
              }, null, 8, ["name"])
            ]) : createCommentVNode("", true),
            createElementVNode("view", _hoisted_3, toDisplayString(item.name), 1)
          ], 10, _hoisted_2);
        }), 128))
      ], 6)
    ], 64)) : createCommentVNode("", true)
  ], 2);
}
var index_taro = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { index_taro as default };
