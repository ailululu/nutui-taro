var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
/*!
* @nutui/nutui-taro v3.1.15 Fri Jan 21 2022 15:42:05 GMT+0800 (GMT+08:00)
* (c) 2021 @jdf2e.
* Released under the MIT License.
*/
import { reactive, computed, onMounted, toRefs, resolveComponent, openBlock, createBlock, normalizeClass, withCtx, createElementVNode, normalizeStyle, createVNode, toDisplayString, renderSlot, createElementBlock, createCommentVNode } from "vue";
import { c as createComponent } from "./component.js";
import _sfc_main$1 from "./Icon.js";
import Taro from "@tarojs/taro";
import { _ as _export_sfc } from "./plugin-vue_export-helper.js";
import "./pxCheck.js";
const { componentName, create } = createComponent("infiniteloading");
const _sfc_main = create({
  props: {
    hasMore: {
      type: Boolean,
      default: true
    },
    threshold: {
      type: Number,
      default: 200
    },
    pullIcon: {
      type: String,
      default: "https://img10.360buyimg.com/imagetools/jfs/t1/169863/6/4565/6306/60125948E7e92774e/40b3a0cf42852bcb.png"
    },
    pullTxt: {
      type: String,
      default: "\u677E\u5F00\u5237\u65B0"
    },
    loadIcon: {
      type: String,
      default: "https://img10.360buyimg.com/imagetools/jfs/t1/169863/6/4565/6306/60125948E7e92774e/40b3a0cf42852bcb.png"
    },
    loadTxt: {
      type: String,
      default: "\u52A0\u8F7D\u4E2D\xB7\xB7\xB7"
    },
    loadMoreTxt: {
      type: String,
      default: "\u54CE\u5440\uFF0C\u8FD9\u91CC\u662F\u5E95\u90E8\u4E86\u5566"
    },
    useWindow: {
      type: Boolean,
      default: true
    },
    containerId: {
      type: String,
      default: ""
    },
    useCapture: {
      type: Boolean,
      default: false
    },
    isOpenRefresh: {
      type: Boolean,
      default: false
    }
  },
  emits: ["scroll-change", "load-more", "refresh"],
  components: {
    "nut-icon": _sfc_main$1
  },
  setup(props, { emit, slots }) {
    const state = reactive({
      scrollHeight: 0,
      scrollTop: 0,
      isInfiniting: false,
      direction: "down",
      isTouching: false,
      refreshMaxH: 0,
      y: 0,
      x: 0,
      distance: 0
    });
    const classes = computed(() => {
      const prefixCls = componentName;
      return {
        [prefixCls]: true
      };
    });
    const getStyle = computed(() => {
      return {
        height: state.distance < 0 ? `0px` : `${state.distance}px`,
        transition: state.isTouching ? `height 0s cubic-bezier(0.25,0.1,0.25,1)` : `height 0.2s cubic-bezier(0.25,0.1,0.25,1)`
      };
    });
    const getParentElement = (el) => {
      return Taro.createSelectorQuery().select(!!props.containerId ? `#${props.containerId} #${el}` : `#${el}`);
    };
    const getScrollHeight = () => {
      const parentElement = getParentElement("scroller");
      parentElement.boundingClientRect((rect) => {
        state.scrollHeight = rect.height;
      }).exec();
    };
    const lower = () => {
      if (state.direction == "up" || !props.hasMore || state.isInfiniting) {
        return false;
      } else {
        state.isInfiniting = true;
        emit("load-more", infiniteDone);
      }
    };
    const scroll = (e) => {
      if (e.detail.scrollTop <= 0) {
        e.detail.scrollTop = 0;
      } else if (e.detail.scrollTop >= state.scrollHeight) {
        e.detail.scrollTop = state.scrollHeight;
      }
      if (e.detail.scrollTop > state.scrollTop || e.detail.scrollTop >= state.scrollHeight) {
        state.direction = "down";
      } else {
        state.direction = "up";
      }
      state.scrollTop = e.detail.scrollTop;
      emit("scroll-change", e.detail.scrollTop);
    };
    const infiniteDone = () => {
      state.isInfiniting = false;
    };
    const touchStart = (event) => {
      if (state.scrollTop == 0 && !state.isTouching && props.isOpenRefresh) {
        state.y = event.touches[0].pageY;
        state.isTouching = true;
        getParentElement("refreshTop").boundingClientRect((rect) => {
          state.refreshMaxH = Math.floor(rect.height * 1 + 10);
        }).exec();
      }
    };
    const touchMove = (event) => {
      state.distance = event.touches[0].pageY - state.y;
      if (state.distance > 0 && state.isTouching) {
        event.preventDefault();
        if (state.distance >= state.refreshMaxH)
          state.distance = state.refreshMaxH;
      } else {
        state.distance = 0;
        state.isTouching = false;
      }
    };
    const touchEnd = () => {
      if (state.distance < state.refreshMaxH) {
        state.distance = 0;
      } else {
        emit("refresh", refreshDone);
      }
    };
    const refreshDone = () => {
      state.distance = 0;
      state.isTouching = false;
    };
    onMounted(() => {
      setTimeout(() => {
        getScrollHeight();
      }, 200);
    });
    return __spreadProps(__spreadValues({
      classes
    }, toRefs(state)), {
      lower,
      scroll,
      touchStart,
      touchMove,
      touchEnd,
      getStyle
    });
  }
});
const _hoisted_1 = {
  class: "top-box",
  id: "refreshTop"
};
const _hoisted_2 = { class: "top-text" };
const _hoisted_3 = { class: "nut-infinite-container" };
const _hoisted_4 = { class: "nut-infinite-bottom" };
const _hoisted_5 = {
  key: 0,
  class: "bottom-box"
};
const _hoisted_6 = { class: "bottom-text" };
const _hoisted_7 = {
  key: 1,
  class: "tips"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_nut_icon = resolveComponent("nut-icon");
  const _component_scroll_view = resolveComponent("scroll-view");
  return openBlock(), createBlock(_component_scroll_view, {
    class: normalizeClass(_ctx.classes),
    scrollY: "true",
    style: { "height": "100%" },
    id: "scroller",
    onScrolltolower: _ctx.lower,
    onScroll: _ctx.scroll,
    onTouchstart: _ctx.touchStart,
    onTouchmove: _ctx.touchMove,
    onTouchend: _ctx.touchEnd
  }, {
    default: withCtx(() => [
      createElementVNode("view", {
        class: "nut-infinite-top",
        style: normalizeStyle(_ctx.getStyle)
      }, [
        createElementVNode("view", _hoisted_1, [
          createVNode(_component_nut_icon, {
            class: "top-img",
            name: _ctx.pullIcon
          }, null, 8, ["name"]),
          createElementVNode("view", _hoisted_2, toDisplayString(_ctx.pullTxt), 1)
        ])
      ], 4),
      createElementVNode("view", _hoisted_3, [
        renderSlot(_ctx.$slots, "default")
      ]),
      createElementVNode("view", _hoisted_4, [
        _ctx.isInfiniting ? (openBlock(), createElementBlock("view", _hoisted_5, [
          createVNode(_component_nut_icon, {
            class: "bottom-img",
            name: _ctx.loadIcon
          }, null, 8, ["name"]),
          createElementVNode("view", _hoisted_6, toDisplayString(_ctx.loadTxt), 1)
        ])) : !_ctx.hasMore ? (openBlock(), createElementBlock("view", _hoisted_7, toDisplayString(_ctx.loadMoreTxt), 1)) : createCommentVNode("", true)
      ])
    ]),
    _: 3
  }, 8, ["class", "onScrolltolower", "onScroll", "onTouchstart", "onTouchmove", "onTouchend"]);
}
var index_taro = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { index_taro as default };
